===============================================================================
============================== Costea Mihai ===================================
===============================================================================

Minlexbfs:

I did what the requirement said, specifically, I displayed the bfs path 
lexicographically. I used a priority_queue vector that represents the neighbors
for every node placed in a minheap after the its node indices.
I chose this approach instead of sorting because a sorting has a complexity, in
worst case at a maximum O(nlog(n)) and the introduction in a heap has 
amortized time O(1) and the extraction is O(log(n)) for every element.
Considering that the insertion of elements in a heap or vector is O(1), this
case in uninteresting. But, we have O(1) when reading from a vector. The only thing
we would pay is the sorting overhead 0(nlog(n)) and after a total reading it 
would be 0(nlog(n)). Instead, on heap, the extraction of an element reduces the
total dimension of the heap by 1 unit, and the extraction has a complexity time 
of O(log(n) + log(n-1) + ... + log(2) + log(1) = O(log(n!))< O(log(n^n)) = 
O(nlog(n)). So, asymptotically speaking, we would have a better time than the
sorting without even reading the vector elements.

This procedure that I spoke of applies for every node from the graph where the 
previously presented "n" is the number of edges adjacent with the respective node.

In the end, a bfs is executed to discover the minimum lexical bfs having the 
guarantee that every time a new node will be placed in the bfs's queue, the 
respective node will be lexicographically minimum compared to the other
adjacent nodes. Finally, we have a O(|V| + |E|) complexity because of the bfs
algorithm where the complexity of extraction of heap O(log(n!)) elements is 
added.

===============================================================================
===============================================================================

Disjcnt:

I don't know why this exercise has this name. Maybe there is an implementation 
of disjunctive sets but it seems complicated and I don't know why would you 
put so much effort when you Tarjan resolves all your problems and makes it in
an elegant manner. Also, I find out the maximal cycles from the
graph with Tarjan if I adapt it a bit and I find out the critical nodes from
the graph for the price of one crossing.

The idea is that I always note the multiplicity of an edge. Meaning that, if I
don't have an edge between 2 nodes, its multiplicity will be 0 and if I have an
edge it will be 1 and if I have 2 it will be 2 etc.
I need a stack to retain the finalization times of each node that I visit when 
when I make bfs on the graph and I use the fact that I have a stack of calls to 
avoid allocating a useless stack that I transmit as parameter to the crossing 
function of the graph.
Every time I cross an edge I reduce its multiplicity. This is very important 
because this way I could say if the respective edge has edge character in both 
ways or not depending on the multiplicity of a single edge. Basically, I
transform the unoriented graph in an oriented one. The actual problem is to
find strong maximal connected elements from the graph and to make the sum of 
|<nr_elemente_componetata_conexa>| elements taken 2 by 2 for every strong
connected element from the graph that has more than 1 nodes.
I also have an indx vector that remembers the visit times for every node and a 
low vector that remembers the minimum link that a node has with its own
neighbors, meaning Tarjan. Every time when a recursive call ends, I increase a 
counter that tells me that I had a node and that I visited all its children.
Being recursive, at a time moment in a node I will have a number of children 
visited from the respective node. This is done until [node] == indx[node], which
means that the respective node is the root for the first respective component 
which means that I have to calculate combinations of numbers of children+1 taken
2 by 2 and I have to add it to the global sum of possible pairs.

The complexity is O(|V| + |E|) because it is a modified crossing in depth and
its modifications are executed in O(1) => final complexity O(|V| + |E|).

===============================================================================
===============================================================================

rtd:

Here's the idea. Because of the fact that a move influences the following moves,
you could not know at a time moment if you are making a native crossing if you 
reached a minimum. You could always take the shortest path but because a choice 
always affects another choice (it is a function of previous choice) you have to 
find a pattern in the dice's moves in a way to be sure that if you choose a 
certain path, that path will be minimal. However, this is quite complicated and
a detailed analysis would be required, even though this is an optimal solution.
Or, you could observe that in every matrix cell there can be up to 24
configurations where the dice could be. This means that if you multiply every
cell from the matrix by 24 and make a crossing of the matrix, you will reach the 
point in which your new graph/matrix is no longer dependent on the previous 
choices  because you increased the possible choice space in a way that the cost 
of entry in a matrix cell is no longer a previous choice function but a constant
function. The result we want to reach is one of the 24 finish cells. From point
dijkstra is applied on the newly created matrix/graph (because we have strictly
positive costs) to find the optimal solution.
In the implementation I decided to use a unordered_map<int,unordered_set<int> >
to store the values where the matrix is blocked because a 
unordered_set<pair<int, int> would've needed a defined hash custom and this 
thing, although interesting, could've led to many bugs. Fortunately, the C++
has the hashes predefined for int.
I insisted on using the map/set for acess in O(1) of the blocking cells from 
the matrix.
I noticed that the minimal information required to figure out in what
configuration you are inside of, are 2 of the 3 sets of face pairs. Meaning, I
had the choice between encoding the configuration of some cells by using the 
face the dice sits on, the face the dice would sit if it was rolled to the
right or the face the dice would sit on if it was rolled in the front or its
analogs (7- fata_respectiva).
I hardcoded some kind of map<pair<int,int>int> that should give me a value that
represents the indices where I store a certain configuration based on the value 
on which the dice sits on and on the value on which the dice would sit on if it
rolled to the right. I did this for the sake of speed and I consider that it is
perfectly plausible because that piece of code isn't being modified together
with the input modification (I don't have a dice with a variable number of 
faces). 

The algorithm complexity is O((|E| + |V|)log(|V|)). Where |V| is n*m*24. And
|E| = n*m*24/4 = n*m*6 => final complexity is O(30*n*mlog(n*m*24)) = 
O(n*m*log(n*m)).
===============================================================================
===============================================================================

revedges:

The interest we have is which is the minimal cost to travel form one side of
the graph to another side of the graph where the cost 0 is a direct path and a
1 cost represents the crossing on an edge backwards. Because of the fact we 
have a lot of queries, a dijkstra after all the queries would not have a very
good result. So, I chose to use Floyd Warshall which will have a O(n^3) 
complexity where "n" is the number of nodes from the graph. Afterwards, for 
every query I will say the result given by Floyd. So, the final complexity is 
 O(n^3 + q) where "q" is the number of queries from the graph. A cache could've 
 been implemented to the Dijkstra variant or a dijkstra could've been made for 
 every pair of nodes and to remember the result => to obtain a slightly more 
 satisfying time on this exercise.

===============================================================================
===============================================================================
